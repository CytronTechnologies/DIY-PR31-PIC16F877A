
# 1 "C:\Users\Phang\Desktop\9.80\PR 31\PR31_final.c"

# 19 "C:\Program Files\HI-TECH Software\include\pic168xa.h"
volatile unsigned char INDF @ 0x00;
volatile unsigned char TMR0 @ 0x01;
volatile unsigned char PCL @ 0x02;
volatile unsigned char STATUS @ 0x03;
volatile unsigned char FSR @ 0x04;
volatile unsigned char PORTA @ 0x05;
volatile unsigned char PORTB @ 0x06;
volatile unsigned char PORTC @ 0x07;

volatile unsigned char PORTD @ 0x08;
volatile unsigned char PORTE @ 0x09;

volatile unsigned char PCLATH @ 0x0A;
volatile unsigned char INTCON @ 0x0B;
volatile unsigned char PIR1 @ 0x0C;
volatile unsigned char PIR2 @ 0x0D;
volatile unsigned char TMR1L @ 0x0E;
volatile unsigned char TMR1H @ 0x0F;
volatile unsigned char T1CON @ 0x10;
volatile unsigned char TMR2 @ 0x11;
volatile unsigned char T2CON @ 0x12;
volatile unsigned char SSPBUF @ 0x13;
volatile unsigned char SSPCON @ 0x14;
volatile unsigned char CCPR1L @ 0x15;
volatile unsigned char CCPR1H @ 0x16;
volatile unsigned char CCP1CON @ 0x17;
volatile unsigned char RCSTA @ 0x18;
volatile unsigned char TXREG @ 0x19;
volatile unsigned char RCREG @ 0x1A;
volatile unsigned char CCPR2L @ 0x1B;
volatile unsigned char CCPR2H @ 0x1C;
volatile unsigned char CCP2CON @ 0x1D;
volatile unsigned char ADRESH @ 0x1E;
volatile unsigned char ADCON0 @ 0x1F;


volatile unsigned char OPTION @ 0x81;
volatile unsigned char TRISA @ 0x85;
volatile unsigned char TRISB @ 0x86;
volatile unsigned char TRISC @ 0x87;

volatile unsigned char TRISD @ 0x88;
volatile unsigned char TRISE @ 0x89;

volatile unsigned char PIE1 @ 0x8C;
volatile unsigned char PIE2 @ 0x8D;
volatile unsigned char PCON @ 0x8E;
volatile unsigned char SSPCON2 @ 0x91;
volatile unsigned char PR2 @ 0x92;
volatile unsigned char SSPADD @ 0x93;
volatile unsigned char SSPSTAT @ 0x94;
volatile unsigned char TXSTA @ 0x98;
volatile unsigned char SPBRG @ 0x99;
volatile unsigned char CMCON @ 0x9C;
volatile unsigned char CVRCON @ 0x9D;
volatile unsigned char ADRESL @ 0x9E;
volatile unsigned char ADCON1 @ 0x9F;


volatile unsigned char EEDATA @ 0x10C;
volatile unsigned char EEADR @ 0x10D;

volatile unsigned char EEADRL @ 0x10D;
volatile unsigned char EEDATH @ 0x10E;
volatile unsigned char EEADRH @ 0x10F;


volatile unsigned char EECON1 @ 0x18C;
volatile unsigned char EECON2 @ 0x18D;


volatile bit IRP @ (unsigned)&STATUS*8+7;
volatile bit RP1 @ (unsigned)&STATUS*8+6;
volatile bit RP0 @ (unsigned)&STATUS*8+5;
volatile bit TO @ (unsigned)&STATUS*8+4;
volatile bit PD @ (unsigned)&STATUS*8+3;
volatile bit ZERO @ (unsigned)&STATUS*8+2;
volatile bit DC @ (unsigned)&STATUS*8+1;
volatile bit CARRY @ (unsigned)&STATUS*8+0;


volatile bit RA5 @ (unsigned)&PORTA*8+5;
volatile bit RA4 @ (unsigned)&PORTA*8+4;
volatile bit RA3 @ (unsigned)&PORTA*8+3;
volatile bit RA2 @ (unsigned)&PORTA*8+2;
volatile bit RA1 @ (unsigned)&PORTA*8+1;
volatile bit RA0 @ (unsigned)&PORTA*8+0;


volatile bit RB7 @ (unsigned)&PORTB*8+7;
volatile bit RB6 @ (unsigned)&PORTB*8+6;
volatile bit RB5 @ (unsigned)&PORTB*8+5;
volatile bit RB4 @ (unsigned)&PORTB*8+4;
volatile bit RB3 @ (unsigned)&PORTB*8+3;
volatile bit RB2 @ (unsigned)&PORTB*8+2;
volatile bit RB1 @ (unsigned)&PORTB*8+1;
volatile bit RB0 @ (unsigned)&PORTB*8+0;


volatile bit RC7 @ (unsigned)&PORTC*8+7;
volatile bit RC6 @ (unsigned)&PORTC*8+6;
volatile bit RC5 @ (unsigned)&PORTC*8+5;
volatile bit RC4 @ (unsigned)&PORTC*8+4;
volatile bit RC3 @ (unsigned)&PORTC*8+3;
volatile bit RC2 @ (unsigned)&PORTC*8+2;
volatile bit RC1 @ (unsigned)&PORTC*8+1;
volatile bit RC0 @ (unsigned)&PORTC*8+0;



volatile bit RD7 @ (unsigned)&PORTD*8+7;
volatile bit RD6 @ (unsigned)&PORTD*8+6;
volatile bit RD5 @ (unsigned)&PORTD*8+5;
volatile bit RD4 @ (unsigned)&PORTD*8+4;
volatile bit RD3 @ (unsigned)&PORTD*8+3;
volatile bit RD2 @ (unsigned)&PORTD*8+2;
volatile bit RD1 @ (unsigned)&PORTD*8+1;
volatile bit RD0 @ (unsigned)&PORTD*8+0;


volatile bit RE2 @ (unsigned)&PORTE*8+2;
volatile bit RE1 @ (unsigned)&PORTE*8+1;
volatile bit RE0 @ (unsigned)&PORTE*8+0;



volatile bit GIE @ (unsigned)&INTCON*8+7;
volatile bit PEIE @ (unsigned)&INTCON*8+6;
volatile bit T0IE @ (unsigned)&INTCON*8+5;
volatile bit INTE @ (unsigned)&INTCON*8+4;
volatile bit RBIE @ (unsigned)&INTCON*8+3;
volatile bit T0IF @ (unsigned)&INTCON*8+2;
volatile bit INTF @ (unsigned)&INTCON*8+1;
volatile bit RBIF @ (unsigned)&INTCON*8+0;

volatile bit TMR0IE @ (unsigned)&INTCON*8+5;
volatile bit TMR0IF @ (unsigned)&INTCON*8+2;



volatile bit PSPIF @ (unsigned)&PIR1*8+7;

volatile bit ADIF @ (unsigned)&PIR1*8+6;
volatile bit RCIF @ (unsigned)&PIR1*8+5;
volatile bit TXIF @ (unsigned)&PIR1*8+4;
volatile bit SSPIF @ (unsigned)&PIR1*8+3;
volatile bit CCP1IF @ (unsigned)&PIR1*8+2;
volatile bit TMR2IF @ (unsigned)&PIR1*8+1;
volatile bit TMR1IF @ (unsigned)&PIR1*8+0;


volatile bit CMIF @ (unsigned)&PIR2*8+6;
volatile bit EEIF @ (unsigned)&PIR2*8+4;
volatile bit BCLIF @ (unsigned)&PIR2*8+3;
volatile bit CCP2IF @ (unsigned)&PIR2*8+0;


volatile bit T1CKPS1 @ (unsigned)&T1CON*8+5;
volatile bit T1CKPS0 @ (unsigned)&T1CON*8+4;
volatile bit T1OSCEN @ (unsigned)&T1CON*8+3;
volatile bit T1SYNC @ (unsigned)&T1CON*8+2;
volatile bit TMR1CS @ (unsigned)&T1CON*8+1;
volatile bit TMR1ON @ (unsigned)&T1CON*8+0;


volatile bit TOUTPS3 @ (unsigned)&T2CON*8+6;
volatile bit TOUTPS2 @ (unsigned)&T2CON*8+5;
volatile bit TOUTPS1 @ (unsigned)&T2CON*8+4;
volatile bit TOUTPS0 @ (unsigned)&T2CON*8+3;
volatile bit TMR2ON @ (unsigned)&T2CON*8+2;
volatile bit T2CKPS1 @ (unsigned)&T2CON*8+1;
volatile bit T2CKPS0 @ (unsigned)&T2CON*8+0;


volatile bit WCOL @ (unsigned)&SSPCON*8+7;
volatile bit SSPOV @ (unsigned)&SSPCON*8+6;
volatile bit SSPEN @ (unsigned)&SSPCON*8+5;
volatile bit CKP @ (unsigned)&SSPCON*8+4;
volatile bit SSPM3 @ (unsigned)&SSPCON*8+3;
volatile bit SSPM2 @ (unsigned)&SSPCON*8+2;
volatile bit SSPM1 @ (unsigned)&SSPCON*8+1;
volatile bit SSPM0 @ (unsigned)&SSPCON*8+0;


volatile bit CCP1X @ (unsigned)&CCP1CON*8+5;
volatile bit CCP1Y @ (unsigned)&CCP1CON*8+4;
volatile bit CCP1M3 @ (unsigned)&CCP1CON*8+3;
volatile bit CCP1M2 @ (unsigned)&CCP1CON*8+2;
volatile bit CCP1M1 @ (unsigned)&CCP1CON*8+1;
volatile bit CCP1M0 @ (unsigned)&CCP1CON*8+0;


volatile bit SPEN @ (unsigned)&RCSTA*8+7;
volatile bit RX9 @ (unsigned)&RCSTA*8+6;
volatile bit SREN @ (unsigned)&RCSTA*8+5;
volatile bit CREN @ (unsigned)&RCSTA*8+4;
volatile bit ADDEN @ (unsigned)&RCSTA*8+3;
volatile bit FERR @ (unsigned)&RCSTA*8+2;
volatile bit OERR @ (unsigned)&RCSTA*8+1;
volatile bit RX9D @ (unsigned)&RCSTA*8+0;


volatile bit CCP2X @ (unsigned)&CCP2CON*8+5;
volatile bit CCP2Y @ (unsigned)&CCP2CON*8+4;
volatile bit CCP2M3 @ (unsigned)&CCP2CON*8+3;
volatile bit CCP2M2 @ (unsigned)&CCP2CON*8+2;
volatile bit CCP2M1 @ (unsigned)&CCP2CON*8+1;
volatile bit CCP2M0 @ (unsigned)&CCP2CON*8+0;


volatile bit ADCS1 @ (unsigned)&ADCON0*8+7;
volatile bit ADCS0 @ (unsigned)&ADCON0*8+6;
volatile bit CHS2 @ (unsigned)&ADCON0*8+5;
volatile bit CHS1 @ (unsigned)&ADCON0*8+4;
volatile bit CHS0 @ (unsigned)&ADCON0*8+3;
volatile bit ADGO @ (unsigned)&ADCON0*8+2;

volatile bit GODONE @ (unsigned)&ADCON0*8+2;
volatile bit ADON @ (unsigned)&ADCON0*8+0;


volatile bit RBPU @ (unsigned)&OPTION*8+7;
volatile bit INTEDG @ (unsigned)&OPTION*8+6;
volatile bit T0CS @ (unsigned)&OPTION*8+5;
volatile bit T0SE @ (unsigned)&OPTION*8+4;
volatile bit PSA @ (unsigned)&OPTION*8+3;
volatile bit PS2 @ (unsigned)&OPTION*8+2;
volatile bit PS1 @ (unsigned)&OPTION*8+1;
volatile bit PS0 @ (unsigned)&OPTION*8+0;


volatile bit TRISA5 @ (unsigned)&TRISA*8+5;
volatile bit TRISA4 @ (unsigned)&TRISA*8+4;
volatile bit TRISA3 @ (unsigned)&TRISA*8+3;
volatile bit TRISA2 @ (unsigned)&TRISA*8+2;
volatile bit TRISA1 @ (unsigned)&TRISA*8+1;
volatile bit TRISA0 @ (unsigned)&TRISA*8+0;


volatile bit TRISB7 @ (unsigned)&TRISB*8+7;
volatile bit TRISB6 @ (unsigned)&TRISB*8+6;
volatile bit TRISB5 @ (unsigned)&TRISB*8+5;
volatile bit TRISB4 @ (unsigned)&TRISB*8+4;
volatile bit TRISB3 @ (unsigned)&TRISB*8+3;
volatile bit TRISB2 @ (unsigned)&TRISB*8+2;
volatile bit TRISB1 @ (unsigned)&TRISB*8+1;
volatile bit TRISB0 @ (unsigned)&TRISB*8+0;


volatile bit TRISC7 @ (unsigned)&TRISC*8+7;
volatile bit TRISC6 @ (unsigned)&TRISC*8+6;
volatile bit TRISC5 @ (unsigned)&TRISC*8+5;
volatile bit TRISC4 @ (unsigned)&TRISC*8+4;
volatile bit TRISC3 @ (unsigned)&TRISC*8+3;
volatile bit TRISC2 @ (unsigned)&TRISC*8+2;
volatile bit TRISC1 @ (unsigned)&TRISC*8+1;
volatile bit TRISC0 @ (unsigned)&TRISC*8+0;



volatile bit TRISD7 @ (unsigned)&TRISD*8+7;
volatile bit TRISD6 @ (unsigned)&TRISD*8+6;
volatile bit TRISD5 @ (unsigned)&TRISD*8+5;
volatile bit TRISD4 @ (unsigned)&TRISD*8+4;
volatile bit TRISD3 @ (unsigned)&TRISD*8+3;
volatile bit TRISD2 @ (unsigned)&TRISD*8+2;
volatile bit TRISD1 @ (unsigned)&TRISD*8+1;
volatile bit TRISD0 @ (unsigned)&TRISD*8+0;


volatile bit IBF @ (unsigned)&TRISE*8+7;
volatile bit OBF @ (unsigned)&TRISE*8+6;
volatile bit IBOV @ (unsigned)&TRISE*8+5;
volatile bit PSPMODE @ (unsigned)&TRISE*8+4;

volatile bit TRISE2 @ (unsigned)&TRISE*8+2;
volatile bit TRISE1 @ (unsigned)&TRISE*8+1;
volatile bit TRISE0 @ (unsigned)&TRISE*8+0;




volatile bit PSPIE @ (unsigned)&PIE1*8+7;

volatile bit ADIE @ (unsigned)&PIE1*8+6;
volatile bit RCIE @ (unsigned)&PIE1*8+5;
volatile bit TXIE @ (unsigned)&PIE1*8+4;
volatile bit SSPIE @ (unsigned)&PIE1*8+3;
volatile bit CCP1IE @ (unsigned)&PIE1*8+2;
volatile bit TMR2IE @ (unsigned)&PIE1*8+1;
volatile bit TMR1IE @ (unsigned)&PIE1*8+0;


volatile bit CMIE @ (unsigned)&PIE2*8+6;
volatile bit EEIE @ (unsigned)&PIE2*8+4;
volatile bit BCLIE @ (unsigned)&PIE2*8+3;
volatile bit CCP2IE @ (unsigned)&PIE2*8+0;


volatile bit POR @ (unsigned)&PCON*8+1;
volatile bit BOR @ (unsigned)&PCON*8+0;


volatile bit GCEN @ (unsigned)&SSPCON2*8+7;
volatile bit ACKSTAT @ (unsigned)&SSPCON2*8+6;
volatile bit ACKDT @ (unsigned)&SSPCON2*8+5;
volatile bit ACKEN @ (unsigned)&SSPCON2*8+4;
volatile bit RCEN @ (unsigned)&SSPCON2*8+3;
volatile bit PEN @ (unsigned)&SSPCON2*8+2;
volatile bit RSEN @ (unsigned)&SSPCON2*8+1;
volatile bit SEN @ (unsigned)&SSPCON2*8+0;


volatile bit SMP @ (unsigned)&SSPSTAT*8+7;
volatile bit CKE @ (unsigned)&SSPSTAT*8+6;
volatile bit DA @ (unsigned)&SSPSTAT*8+5;
volatile bit STOP @ (unsigned)&SSPSTAT*8+4;
volatile bit START @ (unsigned)&SSPSTAT*8+3;
volatile bit RW @ (unsigned)&SSPSTAT*8+2;
volatile bit UA @ (unsigned)&SSPSTAT*8+1;
volatile bit BF @ (unsigned)&SSPSTAT*8+0;

# 352
volatile bit CSRC @ (unsigned)&TXSTA*8+7;
volatile bit TX9 @ (unsigned)&TXSTA*8+6;
volatile bit TXEN @ (unsigned)&TXSTA*8+5;
volatile bit SYNC @ (unsigned)&TXSTA*8+4;
volatile bit BRGH @ (unsigned)&TXSTA*8+2;
volatile bit TRMT @ (unsigned)&TXSTA*8+1;
volatile bit TX9D @ (unsigned)&TXSTA*8+0;


volatile bit C2OUT @ (unsigned)&CMCON*8+7;
volatile bit C1OUT @ (unsigned)&CMCON*8+6;
volatile bit C2INV @ (unsigned)&CMCON*8+5;
volatile bit C1INV @ (unsigned)&CMCON*8+4;
volatile bit CIS @ (unsigned)&CMCON*8+3;
volatile bit CM2 @ (unsigned)&CMCON*8+2;
volatile bit CM1 @ (unsigned)&CMCON*8+1;
volatile bit CM0 @ (unsigned)&CMCON*8+0;


volatile bit CVREN @ (unsigned)&CVRCON*8+7;
volatile bit CVROE @ (unsigned)&CVRCON*8+6;
volatile bit CVRR @ (unsigned)&CVRCON*8+5;
volatile bit CVR3 @ (unsigned)&CVRCON*8+3;
volatile bit CVR2 @ (unsigned)&CVRCON*8+2;
volatile bit CVR1 @ (unsigned)&CVRCON*8+1;
volatile bit CVR0 @ (unsigned)&CVRCON*8+0;


volatile bit ADFM @ (unsigned)&ADCON1*8+7;
volatile bit ADCS2 @ (unsigned)&ADCON1*8+6;
volatile bit PCFG3 @ (unsigned)&ADCON1*8+3;
volatile bit PCFG2 @ (unsigned)&ADCON1*8+2;
volatile bit PCFG1 @ (unsigned)&ADCON1*8+1;
volatile bit PCFG0 @ (unsigned)&ADCON1*8+0;


volatile bit EEPGD @ (unsigned)&EECON1*8+7;
volatile bit WRERR @ (unsigned)&EECON1*8+3;
volatile bit WREN @ (unsigned)&EECON1*8+2;
volatile bit WR @ (unsigned)&EECON1*8+1;
volatile bit RD @ (unsigned)&EECON1*8+0;


# 503 "C:\Program Files\HI-TECH Software\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 556
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files\HI-TECH Software\include\eeprom_routines.h"
extern void eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);


# 629 "C:\Program Files\HI-TECH Software\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 31 "C:\Users\Phang\Desktop\9.80\PR 31\i2c_ar1000.h"
extern void ar_i2c_initialize(void);

# 49
extern unsigned char b_i2c_check_error_flag(void);

# 67
extern unsigned int ar_i2c_read(unsigned char uc_slave_address, unsigned char uc_register);

# 85
extern void ar_i2c_write(unsigned char uc_slave_address, unsigned char uc_register, unsigned long uc_data);

# 22 "C:\Users\Phang\Desktop\9.80\PR 31\PR31_final.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3F32");

# 55
unsigned char m=0,vol,i;
unsigned char prog_chan[7]={1080,900,946,968,1006,1045,1077};
unsigned long currentChannel,freq_kHz;
unsigned int STC = 0;
unsigned int register_values[18] =
{
0xFFFF,
0x5B15,
0xF4B9,
0x8012,
0x0400,
0x28AA,
0x4400,
0x1EE7,
0x7141,
0x007D,
0x82C6,
0x4F55,
0x970C,
0xB845,
0xFC2D,
0x8097,
0x04A1,
0xDF6A
};

unsigned char v2[10] = {0x0,0xF,0xD,0xE,0xF,0xE,0xF,0xF,0xF,0xF};

unsigned char v1[10] = {0x0,0x7,0x6,0x6,0x6,0x3,0x3,0x2,0x1,0x0};

# 89
void delay(unsigned long RC4);
void ar1000_init(void);
void setAR1000 (unsigned int freq_kHz);
void set_vol(unsigned char vol);
void send_config(unsigned char RC4);
void send_char(unsigned char RC4);
void e_pulse(void);
void lcd_goto(unsigned char RC4);
void lcd_clr(void);
void send_string(const char *s);
void send_dec(unsigned long RC4);
void adjust_vol (void);
void adjust_channel(void);
void decrease_chan(void);
void increase_chan(void);
void uart_init (void);
void uart_tx (unsigned char uc_data);
unsigned char uart_rc (void);
void uart_sendstr(const char* s);
void eprom_write (unsigned char channel,unsigned int fm_value);
unsigned int eprom_read (unsigned char channel);
void switch_channel (void);

# 116
int main (void){

delay(5000);

TRISA = 0b11111111;
TRISB = 0b00001111;
TRISD = 0b00000000;
PORTA = 0;
PORTB = 0;
PORTD = 0;



send_config(0b00000001);
send_config(0b00000010);
send_config(0b00000110);
send_config(0b00001100);
send_config(0b00111000);


uart_init();
ar_i2c_initialize();
ar1000_init();

send_string("PR31 :");
lcd_goto(20);
send_string("Digital Radio");
uart_sendstr("PR31 = Digital Radio");
set_vol(8);
delay(150000);

lcd_clr();
send_string("sw1=chan sw2=vol");
uart_sendstr("sw1=chan sw2=vol");
lcd_goto(20);
send_string("sw1(1s)=set");
uart_sendstr("sw1(1s)=set");


for (i=1;i<7;i++)
{
freq_kHz = eeprom_read(i);
if (freq_kHz==255)
eprom_write (i,prog_chan[i]);
}

while(1)
{

if(RB0==0)
{
while (RB0==0);
switch_channel();
adjust_channel();
}

if (RB1 == 0)
{
while (RB1 == 0);
lcd_goto(0);
send_string("volume level=   ");
uart_sendstr("volume level=   ");
m -= 1;
adjust_vol ();
}

}
}

# 191
void switch_channel (void)
{
m++;
if ( m > 6) m = 1;

lcd_clr();
send_string("channel ");
uart_tx(0x0C);
uart_sendstr("Channel ");
send_char(0x30+m);
uart_tx(0x30+m);
currentChannel = eprom_read(m);
setAR1000(currentChannel);
send_dec(currentChannel);
}


void adjust_channel(void)
{
while(1)
{
if (RB3 == 0)
{
unsigned int press=0;
while (RB3==0)
{
press += 1;
if (press >= 650)
decrease_chan();
delay(100);
}
decrease_chan();
delay(1000);
}

if (RB2 == 0)
{
unsigned int press=0;
while (RB2==0)
{
press += 1;
if (press >= 650)
increase_chan();
delay(100);
}
increase_chan();
delay(1000);
}

if (RB0 == 0)
{ unsigned int press=0;
while (RB0==0)
{
press += 1;
if (press >= 1300)
{
eprom_write(m,currentChannel);
lcd_clr();
send_string("channel ");
uart_sendstr("channel ");
send_char(0x30+m);
uart_tx(0x30+m);
send_string(" setted");
uart_sendstr(" setted");
send_dec(currentChannel);
while (RB0==0);
m -= 1;
delay(2000);
}
delay(100);

}
switch_channel();
}

if (RB1 == 0)
{
while (RB1 == 0);
lcd_goto(0);
send_string("volume level=   ");
uart_sendstr("volume level=   ");
m -= 1;
adjust_vol ();
}
}
}

void decrease_chan(void)
{
currentChannel -=1;
if ( currentChannel <= 875 )
currentChannel = 1080;
setAR1000 (currentChannel);
uart_tx(0x0C);
uart_sendstr("channel ");
uart_tx(0x30+m);
send_dec(currentChannel);
delay(1500);
}

void increase_chan(void)
{
currentChannel +=1;
if ( currentChannel >= 1080 )
currentChannel = 875;
setAR1000 (currentChannel);
uart_tx(0x0C);
uart_sendstr("channel ");
uart_tx(0x30+m);
send_dec(currentChannel);
delay(1500);
}

void send_dec(unsigned long RC4)
{ unsigned long no[5];
unsigned int press;
unsigned short i;
no[0]=(RC4/1000+0x30);
RC4=RC4%1000;
no[1]=(RC4/100+0x30);
RC4=RC4%100;
no[2]=(RC4/10+0x30);
no[3]=0x2E;
no[4]=(RC4%10+0x30);
lcd_goto(20);
send_string("FM=");
uart_sendstr("FM=");
for (i=0;i<5;i++)
{
send_char(no[i]);
uart_tx(no[i]);
}
delay(1000);
}

void set_vol(unsigned char key)
{
vol = key;

register_values[1] |= (1<<1);
ar_i2c_write(0x20, 1, register_values[1]);

register_values[3] = (register_values[3] & ~0x0780) | (v1[key] << 7);
ar_i2c_write(0x20, 3, register_values[3]);

register_values[14] = (register_values[14] & ~0xF000)| (v2[key]<< 12);
ar_i2c_write(0x20, 14, register_values[14]);

register_values[1] &= ~(1<<1);
ar_i2c_write(0x20, 1,register_values[1]);
}

void adjust_vol (void)
{ unsigned char vol_default,check;

while (1){
check = 0;
lcd_goto(13);
vol_default = vol;
send_char(0x30+vol);
uart_tx(0x30+vol);
delay(10);


while(check==0)
{
if (RB3 == 0)
{
while (RB3==0);
vol -=1;
if ( vol <= 1 )
vol = 1;
set_vol (vol);
delay(100);
}

if (RB2 == 0)
{
while (RB2==0);
vol +=1;
if (vol >= 9)
vol = 9;
set_vol (vol);
delay(100);
}

if (RB0==0)
{
return;
}

check = vol & ~(vol_default);
check |= ~vol & vol_default;

}
uart_tx(0x08);
}
}




void ar1000_init(void)
{
delay(100);
ar_i2c_write(0x20, 0, register_values[0] & 0xFFFE);

for(int i = 1 ; i < 18 ; i++)
{
ar_i2c_write(0x20, i, register_values[i]);
}

ar_i2c_write(0x20, 0, register_values[0]);

while(STC == 0)
{
STC = ar_i2c_read(0x20, 0x13);
STC &= (1<<5);
delay(10);

}

}

void setAR1000 (unsigned int freq_kHz)
{
freq_kHz -= 690;

register_values[1] |= (1<<1);
ar_i2c_write(0x20, 1, register_values[1]);


register_values[2] &= ~(0x01FF | 0x0200);
ar_i2c_write(0x20, 2, register_values[2]);


register_values[3] &= ~(1<<14);
ar_i2c_write(0x20, 3,register_values[3]);


register_values[3] |= (1<<13);
ar_i2c_write(0x20, 3,register_values[3]);


register_values[2] |= freq_kHz;
ar_i2c_write(0x20, 2,register_values[2]);


register_values[2] |= (1<<9);
ar_i2c_write(0x20, 2,register_values[2]);

while(STC == 0)
{
STC = ar_i2c_read(0x20, 0x13);
STC &= (1<<5);
delay(10);
}



register_values[1] &= ~(1<<1);
ar_i2c_write(0x20, 1,register_values[1]);

currentChannel = (ar_i2c_read(0x20, 0x13)&0xFF80)>>7;
currentChannel += 690;
}




void delay(unsigned long RC4)
{
for( ;RC4>0;RC4-=1);
}

void send_config(unsigned char RC4)
{
RB4=0;
PORTD=RC4;
delay(300);
e_pulse();
}
void send_char(unsigned char RC4)
{
RB4=1;
PORTD=RC4;
delay(300);
e_pulse();
}
void e_pulse(void)
{
RB5=1;
delay(300);
RB5=0;
delay(300);
}
void lcd_goto(unsigned char RC4)
{
if(RC4<16)
{
send_config(0x80+RC4);
}
else
{
RC4=RC4-20;
send_config(0xc0+RC4);
}
}
void lcd_clr(void)
{
send_config(0b00000001);
send_config(0b00000010);
delay(350);
}
void send_string(const char *s)
{
unsigned char i=0;
while (s && *s)send_char (*s++);
}

# 515
void uart_init (void)
{
BRGH = 1;
SPBRG = (20000000 / 16 / 9600) - 1;
SPEN = 1;
CREN = 1;
TXEN = 1;
TRISC6 = 0;
TRISC7 = 1;
uart_tx(0x0C);
}

void uart_tx (unsigned char uc_data)
{
while (TXIF == 0);
TXREG = uc_data;
}

unsigned char uart_rc (void)
{
if (OERR == 1)
{
CREN = 0;
CREN = 1;
}
while (RCIF == 0);
return RCREG;
}

void uart_sendstr(const char *s)
{
uart_tx(0x0A);
uart_tx(0x0D);

while (*s != '\0')
{
uart_tx(*s);
s++;
}

}




unsigned int eprom_read (unsigned char channel_adr)
{
unsigned int fm_value;
EEADR = channel_adr;
EEPGD = 0;
RD = 1;
while (RD == 1);
fm_value = (EEDATA + 825);

return fm_value;
}

void eprom_write (unsigned char channel_adr,unsigned int fm_value)
{
EEADR = channel_adr;
fm_value -= 825;
EEDATA = fm_value;
EEPGD = 0;
WREN = 1;
EECON2 = 0x55;
EECON2 = 0xAA;
WR = 1;
WREN = 0;
while (WR == 1);
}

